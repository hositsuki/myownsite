name: Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  check-env:
    runs-on: ubuntu-latest
    steps:
      - name: Check Environment Variables
        run: |
          # Define required environment variables
          required_vars=(
            "MONGODB_URI"
            "JWT_SECRET"
            "REDIS_URL"
            "IMAGE_ENCRYPTION_KEY"
            "CLOUDINARY_CLOUD_NAME"
            "CLOUDINARY_API_KEY"
            "CLOUDINARY_API_SECRET"
            "OPENAI_API_KEY"
            "VERCEL_TOKEN"
            "VERCEL_ORG_ID"
            "VERCEL_PROJECT_ID"
            "RAILWAY_TOKEN"
            "RAILWAY_SERVICE_ID"
            "DISCORD_WEBHOOK_ID"
            "DISCORD_WEBHOOK_TOKEN"
          )

          missing_vars=()

          # Check each required variable
          for var in "${required_vars[@]}"; do
            if [[ -z "${!var}" ]]; then
              missing_vars+=("$var")
            fi
          done

          # If any variables are missing, fail the check
          if [ ${#missing_vars[@]} -ne 0 ]; then
            echo " Missing environment variables:"
            printf '%s\n' "${missing_vars[@]}"
            exit 1
          fi

          echo " All required environment variables are set"
        env:
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          REDIS_URL: ${{ secrets.REDIS_URL }}
          IMAGE_ENCRYPTION_KEY: ${{ secrets.IMAGE_ENCRYPTION_KEY }}
          CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
          CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
          CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
          RAILWAY_SERVICE_ID: ${{ secrets.RAILWAY_SERVICE_ID }}
          DISCORD_WEBHOOK_ID: ${{ secrets.DISCORD_WEBHOOK_ID }}
          DISCORD_WEBHOOK_TOKEN: ${{ secrets.DISCORD_WEBHOOK_TOKEN }}

  test:
    needs: check-env
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Server Dependencies
        working-directory: ./server
        run: npm install

      - name: Test Server
        working-directory: ./server
        run: npm test
        env:
          NODE_ENV: test
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          REDIS_URL: ${{ secrets.REDIS_URL }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          IMAGE_ENCRYPTION_KEY: ${{ secrets.IMAGE_ENCRYPTION_KEY }}

      - name: Install Client Dependencies
        working-directory: ./client
        run: npm install

      - name: Test Client
        working-directory: ./client
        run: npm test
        env:
          NODE_ENV: test

  deploy-backend:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      url: ${{ steps.railway-deploy.outputs.deployment_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Railway CLI
        run: npm i -g @railway/cli

      - name: Deploy to Railway
        id: railway-deploy
        run: |
          # Create a temporary package.json for server deployment
          echo '{
            "name": "personal-website-server",
            "version": "1.0.0",
            "private": true,
            "type": "module",
            "scripts": {
              "build": "tsc",
              "start": "node dist/app.js"
            },
            "dependencies": {
              "@types/multer": "^1.4.12",
              "@types/redis": "^4.0.10",
              "bcryptjs": "^2.4.3",
              "cloudinary": "^2.5.1",
              "cors": "^2.8.5",
              "dotenv": "^16.4.5",
              "express": "^4.18.2",
              "jsonwebtoken": "^9.0.2",
              "mongoose": "^8.8.2",
              "morgan": "^1.10.0",
              "multer": "^1.4.5-lts.1",
              "redis": "^4.7.0",
              "sharp": "^0.33.5",
              "winston": "^3.11.0",
              "typescript": "^5.0.0",
              "@types/express": "^4.17.21",
              "@types/node": "^20.0.0"
            }
          }' > temp-package.json
          
          # Copy server files
          cp -r server/src .
          cp server/tsconfig.json .
          
          # Replace package.json
          mv package.json package.json.bak
          mv temp-package.json package.json
          
          # Deploy to Railway with verbose output and capture URL
          RAILWAY_OUTPUT=$(railway up --service ${{ secrets.RAILWAY_SERVICE_ID }} --detach --verbose)
          RAILWAY_EXIT_CODE=$?
          echo "Railway deployment output:"
          echo "$RAILWAY_OUTPUT"
          
          # Extract deployment URL from output
          DEPLOY_URL=$(echo "$RAILWAY_OUTPUT" | grep -o 'https://.*\.railway\.app' || echo "")
          echo "deployment_url=$DEPLOY_URL" >> $GITHUB_OUTPUT
          
          # Restore original package.json and clean up
          mv package.json.bak package.json
          rm -rf src tsconfig.json
          
          # Exit with Railway's exit code
          exit $RAILWAY_EXIT_CODE
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Check deployment URL
        if: success()
        run: |
          if [ -n "${{ steps.railway-deploy.outputs.deployment_url }}" ]; then
            echo "Deployment URL: ${{ steps.railway-deploy.outputs.deployment_url }}"
          else
            echo "Warning: No deployment URL found in Railway output"
          fi

  deploy-frontend:
    needs: deploy-backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./client
          vercel-args: '--prod'
        env:
          NEXT_PUBLIC_API_URL: ${{ needs.deploy-backend.outputs.url }}
          NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME: ${{ secrets.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME }}

  notify:
    needs: [deploy-backend, deploy-frontend]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Send Discord Notification
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: https://discord.com/api/webhooks/${{ secrets.DISCORD_WEBHOOK_ID }}/${{ secrets.DISCORD_WEBHOOK_TOKEN }}
        with:
          args: |
            Deployment Status:
            Backend: ${{ needs.deploy-backend.result }}
            Frontend: ${{ needs.deploy-frontend.result }}
            
            Environment: Production
            Triggered by: ${{ github.actor }}
            Commit: ${{ github.sha }}
