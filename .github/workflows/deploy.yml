name: Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Test Server
        working-directory: ./server
        run: |
          npm ci
          npm test
        env:
          NODE_ENV: test
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          REDIS_URL: ${{ secrets.REDIS_URL }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          IMAGE_ENCRYPTION_KEY: ${{ secrets.IMAGE_ENCRYPTION_KEY }}

      - name: Test Client
        working-directory: ./client
        run: |
          npm ci
          npm test
        env:
          NODE_ENV: test

  deploy-backend:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      url: ${{ steps.railway-deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to Railway
        id: railway-deploy
        uses: bervProject/railway-deploy@main
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        with:
          service: ${{ secrets.RAILWAY_SERVICE_ID }}
          directory: ./server
          environment: |
            {
              "NODE_ENV": "production",
              "MONGODB_URI": "${{ secrets.MONGODB_URI }}",
              "REDIS_URL": "${{ secrets.REDIS_URL }}",
              "JWT_SECRET": "${{ secrets.JWT_SECRET }}",
              "IMAGE_ENCRYPTION_KEY": "${{ secrets.IMAGE_ENCRYPTION_KEY }}",
              "CLOUDINARY_API_KEY": "${{ secrets.CLOUDINARY_API_KEY }}",
              "CLOUDINARY_API_SECRET": "${{ secrets.CLOUDINARY_API_SECRET }}",
              "OPENAI_API_KEY": "${{ secrets.OPENAI_API_KEY }}",
              "NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME": "${{ secrets.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME }}",
              "SERVER_PORT": "5000",
              "CACHE_TTL": "3600",
              "CACHE_MAX_SIZE": "100",
              "CORS_ORIGINS": "https://myownsite-production.up.railway.app",
              "RATE_LIMIT_WINDOW": "900000",
              "RATE_LIMIT_MAX_REQUESTS": "100",
              "MAX_IMAGE_SIZE": "5242880",
              "ALLOWED_IMAGE_TYPES": "image/jpeg,image/png,image/gif,image/webp"
            }

  deploy-frontend:
    needs: deploy-backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./client
          vercel-args: '--prod'
        env:
          NEXT_PUBLIC_API_URL: ${{ needs.deploy-backend.outputs.url }}
          NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME: ${{ secrets.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME }}

  notify:
    needs: [deploy-backend, deploy-frontend]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Send Discord Notification
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: https://discord.com/api/webhooks/${{ secrets.DISCORD_WEBHOOK_ID }}/${{ secrets.DISCORD_WEBHOOK_TOKEN }}
        with:
          args: |
            ðŸš€ Deployment Status:
            Backend: ${{ needs.deploy-backend.result }}
            Frontend: ${{ needs.deploy-frontend.result }}
            
            Environment: Production
            Triggered by: ${{ github.actor }}
            Commit: ${{ github.sha }}
